{"version":3,"sources":["Scoreboard.js","Card.js","img/artichokes.jpg","img/asparagus.jpg","img/avocados.jpg","img/basil.jpg","img/beets.jpg","img/bell-pepper.jpg","img/broccoli.jpg","img/carrots.jpg","img/cauliflower.jpeg","img/chestnuts.jpg","img/chilis.jpg","img/corn.jpg","img/cucumbers.jpg","img/eggplant.jpg","img/fava-beans.jpg","img/garlic.jpg","img/green-beans.jpg","img/leeks.jpg","img/lettuce.jpg","img/okra.jpg","img/peas.jpg","img/potatoes.jpg","img/pumpkins.jpg","img/purple-kale.jpg","img/purple-cauliflower.jpg","img/radishes.jpg","img/red-chard.jpg","img/rhubarb.jpg","img/savoy-cabbage.jpg","img/spinach.jpg","img/squash.jpg","img/tomatoes.jpg","img/walnuts.jpg","img/zucchini.jpg","Game.js","App.js","index.js"],"names":["Scoreboard","props","className","score","max","progressBar","i","drawProgressBar","Card","useState","clicks","setClicks","useEffect","gameNumber","style","order","onClick","scorePoint","shuffleCards","newGame","src","photo","alt","veggieName","Game","setScore","setGameNumber","drawCards","numCards","newCards","veggies","artichokes","asparagus","avocados","basil","beets","bellpepper","broccoli","carrots","cauliflower","chestnuts","chilis","corn","cucumbers","eggplant","favabeans","garlic","greenbeans","leeks","lettuce","okra","peas","potatoes","pumpkins","purplekale","purplecauliflower","radishes","redchard","rhubarb","savoycabbage","spinach","squash","tomatoes","walnuts","zucchini","randomDraw","Math","floor","random","length","randomVeggie","splice","push","orderCards","initCardOrder","cards","setCards","cardOrder","setCardOrder","newOrder","t","m","map","card","key","image","name","App","display","setDisplay","setNumCards","userInput","setUserInput","message","setMessage","value","onChange","event","target","newNumber","parseInt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4cbcd587.chunk.js","sourcesContent":["const Scoreboard = (props) => {\n\n  const drawProgressBar = (score, max) => {\n    let progressBar = '';\n    if (score === max) {\n      for (let i=0; i<score; i++) {\n        progressBar += '⭐️';\n      }\n    }\n    else {\n      for (let i=0; i<score; i++) {\n        progressBar += '█';\n      }\n      for (let i=0; i<max-score; i++) {\n        progressBar += '░';\n      }\n    }\n    return progressBar;\n  }\n\n  return (\n    <div className=\"Scoreboard\" > { /* add className when game is won—show it in green? */ }\n      <p>Score: { props.score } out of { props.max }</p>\n      <p>{drawProgressBar(props.score, props.max)}</p>\n    </div>\n  );\n}\n\nexport default Scoreboard;\n","import { useEffect, useState } from \"react\";\n\n\nconst Card = (props) => {\n\n  const [clicks, setClicks] = useState(0);\n\n  const clickCard = () => {\n    if (clicks === 0) {\n      // up clicks\n      // score point\n      setClicks(clicks + 1);\n      props.scorePoint();\n      props.shuffleCards();\n    } else {\n      props.newGame();\n    }\n  }\n\n  useEffect(() => {\n    setClicks(0);\n  }, [props.gameNumber]);\n\n  return (\n    <div style={{order: props.order}} className=\"Card\" onClick={clickCard}>\n      <img src={ props.photo } alt={ props.veggieName } />\n      <p>{ props.veggieName }</p>\n    </div>\n  );\n}\n\nexport default Card;","export default __webpack_public_path__ + \"static/media/artichokes.54fb7295.jpg\";","export default __webpack_public_path__ + \"static/media/asparagus.2061b489.jpg\";","export default __webpack_public_path__ + \"static/media/avocados.2c952d76.jpg\";","export default __webpack_public_path__ + \"static/media/basil.caae388d.jpg\";","export default __webpack_public_path__ + \"static/media/beets.b55cfc0b.jpg\";","export default __webpack_public_path__ + \"static/media/bell-pepper.06e83441.jpg\";","export default __webpack_public_path__ + \"static/media/broccoli.6c49afcb.jpg\";","export default __webpack_public_path__ + \"static/media/carrots.ba049240.jpg\";","export default __webpack_public_path__ + \"static/media/cauliflower.5c2424a4.jpeg\";","export default __webpack_public_path__ + \"static/media/chestnuts.e2fd7e92.jpg\";","export default __webpack_public_path__ + \"static/media/chilis.a8898671.jpg\";","export default __webpack_public_path__ + \"static/media/corn.2e6bb4cc.jpg\";","export default __webpack_public_path__ + \"static/media/cucumbers.2ab93af1.jpg\";","export default __webpack_public_path__ + \"static/media/eggplant.e423da7c.jpg\";","export default __webpack_public_path__ + \"static/media/fava-beans.19dd3486.jpg\";","export default __webpack_public_path__ + \"static/media/garlic.291da210.jpg\";","export default __webpack_public_path__ + \"static/media/green-beans.d5914f07.jpg\";","export default __webpack_public_path__ + \"static/media/leeks.5a95e3b9.jpg\";","export default __webpack_public_path__ + \"static/media/lettuce.72c3400f.jpg\";","export default __webpack_public_path__ + \"static/media/okra.6093e7ed.jpg\";","export default __webpack_public_path__ + \"static/media/peas.13add9ed.jpg\";","export default __webpack_public_path__ + \"static/media/potatoes.35f8a3a3.jpg\";","export default __webpack_public_path__ + \"static/media/pumpkins.cc7dfad8.jpg\";","export default __webpack_public_path__ + \"static/media/purple-kale.8eb555d8.jpg\";","export default __webpack_public_path__ + \"static/media/purple-cauliflower.5b5af9f1.jpg\";","export default __webpack_public_path__ + \"static/media/radishes.e4f37072.jpg\";","export default __webpack_public_path__ + \"static/media/red-chard.5d0054aa.jpg\";","export default __webpack_public_path__ + \"static/media/rhubarb.adcd89ed.jpg\";","export default __webpack_public_path__ + \"static/media/savoy-cabbage.ddc5b1c0.jpg\";","export default __webpack_public_path__ + \"static/media/spinach.054ed9ac.jpg\";","export default __webpack_public_path__ + \"static/media/squash.ee0a3c96.jpg\";","export default __webpack_public_path__ + \"static/media/tomatoes.9e292dc3.jpg\";","export default __webpack_public_path__ + \"static/media/walnuts.5be39a0b.jpg\";","export default __webpack_public_path__ + \"static/media/zucchini.91481f69.jpg\";","// import { useEffect, useState } from 'react';\nimport Scoreboard from './Scoreboard';\nimport Card from './Card';\nimport { useState } from 'react';\n\nimport artichokes from './img/artichokes.jpg';\nimport asparagus from './img/asparagus.jpg';\nimport avocados from './img/avocados.jpg';\nimport basil from './img/basil.jpg';\nimport beets from './img/beets.jpg';\nimport bellpepper from './img/bell-pepper.jpg';\nimport broccoli from './img/broccoli.jpg';\nimport carrots from './img/carrots.jpg';\nimport cauliflower from './img/cauliflower.jpeg';\nimport chestnuts from './img/chestnuts.jpg';\nimport chilis from './img/chilis.jpg';\nimport corn from './img/corn.jpg';\nimport cucumbers from './img/cucumbers.jpg';\nimport eggplant from './img/eggplant.jpg';\nimport favabeans from './img/fava-beans.jpg';\nimport garlic from './img/garlic.jpg';\nimport greenbeans from './img/green-beans.jpg';\nimport leeks from './img/leeks.jpg';\nimport lettuce from './img/lettuce.jpg';\nimport okra from './img/okra.jpg';\nimport peas from './img/peas.jpg';\nimport potatoes from './img/potatoes.jpg';\nimport pumpkins from './img/pumpkins.jpg';\nimport purplekale from './img/purple-kale.jpg';\nimport purplecauliflower from './img/purple-cauliflower.jpg';\nimport radishes from './img/radishes.jpg';\nimport redchard from './img/red-chard.jpg';\nimport rhubarb from './img/rhubarb.jpg';\nimport savoycabbage from './img/savoy-cabbage.jpg';\nimport spinach from './img/spinach.jpg';\nimport squash from './img/squash.jpg';\nimport tomatoes from './img/tomatoes.jpg';\nimport walnuts from './img/walnuts.jpg';\nimport zucchini from './img/zucchini.jpg';\n\nconst Game = (props) => {\n\n  const [score, setScore] = useState(0);\n  const [gameNumber, setGameNumber] = useState(1);\n\n  const drawCards = (numCards) => {\n    let newCards = [];\n    let veggies = [\n      {'name': 'artichokes', 'image': artichokes,},\n      {'name': 'asparagus', 'image': asparagus,},\n      {'name': 'avocados', 'image': avocados,},\n      {'name': 'basil', 'image': basil,},\n      {'name': 'beets', 'image': beets,},\n      {'name': 'bell pepper', 'image': bellpepper,},\n      {'name': 'broccoli', 'image': broccoli,},\n      {'name': 'carrots', 'image': carrots,},\n      {'name': 'cauliflower', 'image': cauliflower,},\n      {'name': 'chestnuts', 'image': chestnuts,},\n      {'name': 'chilis', 'image': chilis,},\n      {'name': 'corn', 'image': corn,},\n      {'name': 'cucumbers', 'image': cucumbers,},\n      {'name': 'eggplant', 'image': eggplant,},\n      {'name': 'fava beans', 'image': favabeans,},\n      {'name': 'garlic', 'image': garlic,},\n      {'name': 'green beans', 'image': greenbeans,},\n      {'name': 'leeks', 'image': leeks,},\n      {'name': 'lettuce', 'image': lettuce,},\n      {'name': 'okra', 'image': okra,},\n      {'name': 'peas', 'image': peas,},\n      {'name': 'potatoes', 'image': potatoes,},\n      {'name': 'pumpkins', 'image': pumpkins,},\n      {'name': 'purple kale', 'image': purplekale,},\n      {'name': 'purple cauliflower', 'image': purplecauliflower,},\n      {'name': 'radishes', 'image': radishes,},\n      {'name': 'red chard', 'image': redchard,},\n      {'name': 'rhubarb', 'image': rhubarb,},\n      {'name': 'savoy cabbage', 'image': savoycabbage,},\n      {'name': 'spinach', 'image': spinach,},\n      {'name': 'squash', 'image': squash,},\n      {'name': 'tomatoes', 'image': tomatoes,},\n      {'name': 'walnuts', 'image': walnuts,},\n      {'name': 'zucchini', 'image': zucchini,},\n    ];\n\n    for (let i=0; i<numCards; i++) {\n        // pick a random card\n      const randomDraw = Math.floor(Math.random() * veggies.length);\n      const randomVeggie = veggies[randomDraw];\n\n      // remove it from the list\n      veggies.splice(randomDraw, 1);\n\n      newCards.push({...randomVeggie, 'key': i});\n    }\n\n    return newCards;\n\n  }\n\n  const orderCards = (numCards) => {\n    let initCardOrder = [];\n    for (let i=0; i<numCards; i++) {\n      initCardOrder.push(i);\n    }\n    return initCardOrder;\n  }\n\n  const [cards, setCards] = useState(drawCards(props.numCards));\n  const [cardOrder, setCardOrder] = useState(orderCards(props.numCards));\n\n  const newGame = (numCards) => {\n    setScore(0);\n    setGameNumber(gameNumber + 1);\n    setCards(drawCards(numCards));\n    orderCards(numCards);\n  }\n\n  const scorePoint = () => {\n    setScore(score + 1);\n  }\n\n  const shuffleCards = () => {\n    let newOrder = [];\n    for (let i=0; i<cards.length; i++) {\n      newOrder.push(i);\n    }\n    // Fisher-Yates shuffle\n    let m = newOrder.length, t, i;\n    while (m) {\n      i = Math.floor(Math.random() * m--);\n      t = newOrder[m];\n      newOrder[m] = newOrder[i];\n      newOrder[i] = t;\n    }\n\n    setCardOrder(newOrder);\n  }\n\n  return (\n    <div className=\"Gameboard\">\n      <Scoreboard score={ score } max={props.numCards} />\n      <div className=\"Cards\">\n        { cards.map(card => <Card key={card.key} order={cardOrder[card.key]} photo={ card.image } veggieName={ card.name } shuffleCards={shuffleCards} scorePoint={scorePoint} newGame={() => {newGame(props.numCards)}} gameNumber={gameNumber} />) }\n      </div>\n    </div>\n  );\n}\n\nexport default Game;","import { useState } from 'react';\nimport './App.css';\nimport Game from './Game';\n\nfunction App() {\n  const [display, setDisplay] = useState('game');\n  const [numCards, setNumCards] = useState(3); // TODO: when game is lost, go back to user's chosen number of cards\n  const [userInput, setUserInput] = useState(numCards);\n  const [message, setMessage] = useState('');\n\n  const chooseDifficulty = (event) => {\n    setUserInput(event.target.value);\n    const newNumber = parseInt(event.target.value);\n    if (newNumber > 0 && newNumber <= 30) {\n      setNumCards(event.target.value);\n      setMessage('');\n    }\n    else {\n      setMessage('Choose a number between 1 and 30.');\n    }\n  }\n\n  if (display === 'game') {\n    return (\n      <div className=\"App\">\n        <button onClick={() => {setDisplay('settings')}}>Settings</button>\n        <Game numCards={numCards} />\n      </div>\n    );\n  }\n\n  if (display === 'settings') {\n    return (\n      <div className=\"App\">\n        <label>Number of cards</label>\n        <input value={userInput} onChange={chooseDifficulty} />\n        { message !== '' ? message : '' }\n        <button onClick={() => {setDisplay('game')}}>Play game with {numCards} cards</button>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}